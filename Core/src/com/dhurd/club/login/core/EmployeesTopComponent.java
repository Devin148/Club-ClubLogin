package com.dhurd.club.login.core;

import com.dhurd.club.login.sql.SQLManager;
import java.awt.BorderLayout;
import java.awt.Component;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
    dtd = "-//com.dhurd.club.login.core//Employees//EN",
autostore = false)
@TopComponent.Description(
    preferredID = "EmployeesTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.dhurd.club.login.core.EmployeesTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
    displayName = "#CTL_EmployeesAction",
preferredID = "EmployeesTopComponent")
@Messages({
    "CTL_EmployeesAction=Employees",
    "CTL_EmployeesTopComponent=Employees",
    "HINT_EmployeesTopComponent=Current listing of club employees."
})
public final class EmployeesTopComponent extends TopComponent {
    private static final Logger logger = Logger.getLogger(EmployeesTopComponent.class.getName());
    
    private Map<String, Boolean> employeeStates;
    private List<String> employees;
    
    private EmployeeTableModel model;
    private EmployeeTableCellRenderer renderer;

    public EmployeesTopComponent() {
        initComponents();
        setName(Bundle.CTL_EmployeesTopComponent());
        setToolTipText(Bundle.HINT_EmployeesTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeesTable = new javax.swing.JTable();

        employeesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        employeesTable.setTableHeader(null);
        jScrollPane1.setViewportView(employeesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable employeesTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        employees = new ArrayList<String>();
        employeeStates = new HashMap<String, Boolean>();
        ResultSet rs = SQLManager.getDefault().runQuery("SELECT stagename, loggedin FROM employees WHERE active = 1 ORDER BY stagename");
        try {
            while (rs.next()) {
                String stageName = rs.getString("stagename");
                int loggedIn = rs.getInt("loggedin");
                employees.add(stageName);
                employeeStates.put(stageName, loggedIn == 1 ? Boolean.TRUE : Boolean.FALSE);
            }
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Failed to get list of employees for top component", ex);
        }
        
        model = new EmployeeTableModel();
        renderer = new EmployeeTableCellRenderer();
        employeesTable.setDefaultRenderer(String.class, renderer);
        employeesTable.setModel(model);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    /**
     * Table model representing club employees. Will be shown as a list.
     * Possible change to a node structure in future?
     */
    private class EmployeeTableModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return employees.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            String stageName = employees.get(rowIndex);
            if (columnIndex == 0) {
                return employeeStates.get(stageName);
            } else {
                return stageName;
            }
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return false;
        }
    
    }
    
    /**
     * Temp employee renderer. Testing purposes only.
     */
    private class EmployeeTableCellRenderer extends JPanel implements TableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            this.setLayout(new BorderLayout());
            if (column == 1) {
                this.add(new JLabel("1"), BorderLayout.CENTER);
            } else {
                this.add(new JLabel("Else"), BorderLayout.CENTER);
            }
            return this;
        }
        
    }
}
